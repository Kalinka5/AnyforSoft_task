"""
Performance benchmark for the MLM Commission Engine.
"""
import argparse
import cProfile
import pstats
import time
import sys
import os

# Add the project root to the Python path to allow importing from src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.data_loader import load_partners
from src.commission_engine import CommissionCalculator
from src.utils import get_days_in_month

def run_benchmark(file_path: str):
    """
    Runs the performance benchmark.

    Args:
        file_path: Path to the large partners JSON file.
    """
    print(f"Loading data from '{file_path}'...")
    try:
        partners = load_partners(file_path)
    except (FileNotFoundError, ValueError) as e:
        print(f"Error loading data: {e}", file=sys.stderr)
        return

    num_partners = len(partners)
    print(f"Loaded {num_partners} partners.")
    
    # Use a fixed date for consistent benchmarking
    days_in_month = get_days_in_month(2023, 4)

    # --- Time Benchmark ---
    print("\n--- Running Time Benchmark ---")
    start_time = time.perf_counter()
    
    calculator = CommissionCalculator(partners, days_in_month)
    commissions = calculator.calculate_commissions()
    
    end_time = time.perf_counter()
    elapsed_time = end_time - start_time
    
    print(f"Commission calculation for {num_partners} partners took: {elapsed_time:.4f} seconds.")
    if elapsed_time > 2.0:
        print("Performance target NOT MET (> 2 seconds)")
    else:
        print("Performance target MET (<= 2 seconds)")

    # --- Memory/CPU Profile ---
    print("\n--- Running cProfile Analysis ---")
    profiler = cProfile.Profile()
    profiler.enable()

    # Rerun the calculation to profile it
    calculator = CommissionCalculator(partners, days_in_month)
    calculator.calculate_commissions()
    
    profiler.disable()
    
    stats = pstats.Stats(profiler).sort_stats('cumulative')
    print("Top 15 cumulative time functions:")
    stats.print_stats(15)

def main():
    """Main function to run the benchmark."""
    parser = argparse.ArgumentParser(description="Benchmark the MLM commission engine.")
    parser.add_argument(
        "--input",
        required=True,
        help="Path to the large partners JSON file (e.g., generated by generate_test_data.py).",
    )
    args = parser.parse_args()
    
    run_benchmark(args.input)

if __name__ == "__main__":
    main()
