"""
Handles loading and validating partner data from a JSON file.
"""
import json
from dataclasses import dataclass
from typing import List

@dataclass(frozen=True, slots=True)
class Partner:
    """
    Represents a partner in the MLM network.

    Attributes:
        id: The unique identifier for the partner.
        parent_id: The identifier of the parent partner, or None for root partners.
        name: The name of the partner.
        monthly_revenue: The monthly revenue generated by the partner.
    """
    id: int
    parent_id: int | None
    name: str
    monthly_revenue: float

def load_partners(file_path: str) -> List[Partner]:
    """
    Loads partner data from a JSON file.

    Args:
        file_path: The path to the partners JSON file.

    Returns:
        A list of Partner objects.

    Raises:
        FileNotFoundError: If the input file is not found.
        ValueError: If the JSON is malformed or data is invalid.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"Error: Input file not found at '{file_path}'")
    except json.JSONDecodeError:
        raise ValueError(f"Error: Malformed JSON in '{file_path}'")

    if not isinstance(data, list):
        raise ValueError("Error: Input JSON must be a list of partner objects.")

    partners = []
    for item in data:
        try:
            partner = Partner(
                id=item['id'],
                parent_id=item['parent_id'],
                name=item['name'],
                monthly_revenue=item['monthly_revenue']
            )
            partners.append(partner)
        except (KeyError, TypeError) as e:
            raise ValueError(f"Invalid data format in partner object: {item}. Missing or invalid key: {e}")
    return partners
